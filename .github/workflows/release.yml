name: Release

on:
  workflow_run:
    workflows: ["CI"]
    branches: [main]
    types:
      - completed

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    # Skip running on forks and ensure CI workflow succeeded
    if: github.repository_owner == 'yoshiori' && github.event.workflow_run.conclusion == 'success' # Replace with your GitHub username/org
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues/PRs
      pull-requests: write # to be able to comment on released PRs
      id-token: write # to enable OIDC for npm provenance

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Fetch all history for all tags and branches
          fetch-depth: 0
          # For semantic-release to be able to push to the repo
          persist-credentials: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install semantic-release and plugins
        run: npm install -g semantic-release @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/changelog @semantic-release/git @semantic-release/github @semantic-release/exec

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-gnu

      - name: Install Debian packaging tools
        run: sudo apt-get update && sudo apt-get install -y debhelper build-essential pkg-config reprepro gnupg

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check for existing tags
        run: |
          # Check if v1.0.0 tag exists and force delete it if necessary
          if git rev-parse -q --verify "refs/tags/v1.0.0" >/dev/null; then
            echo "Tag v1.0.0 already exists. Will be handled by semantic-release."
          fi

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --no-ci
        id: semantic-release

      - name: Set up APT repository
        if: steps.semantic-release.outputs.new_release_published == 'true'
        run: |
          # Setup GPG key for repository signing
          echo "Setting up GPG key"
          cat > /tmp/gpg-gen-key << EOF
          Key-Type: RSA
          Key-Length: 4096
          Name-Real: Profile Switcher Release Key
          Name-Email: bot@github.com
          Expire-Date: 0
          %no-protection
          %commit
          EOF
          gpg --batch --gen-key /tmp/gpg-gen-key

          # Setup APT repository
          echo "Setting up APT repository"
          ./scripts/setup-repository.sh

          # Create a symlink from latest to the current version
          VERSION=${{ steps.semantic-release.outputs.new_release_version }}
          echo "Creating 'latest' symlink for version ${VERSION}"

          # Export public GPG key
          gpg --armor --export bot@github.com > apt-repo/public.gpg

      - name: Upload APT repository to release
        if: steps.semantic-release.outputs.new_release_published == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: latest
          files: |
            apt-repo/dists/**/*
            apt-repo/pool/**/*
            apt-repo/public.gpg
